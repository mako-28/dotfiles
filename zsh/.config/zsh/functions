# make ssh_auth_sock for tmux/screen
function attach_ssh_auth_sock() {
    if [ ! -z "$SSH_AUTH_SOCK" -a "$SSH_AUTH_SOCK" != "$HOME/.ssh/agent_sock" ] ; then
        unlink "$HOME/.ssh/agent_sock" 2>/dev/null
        ln -s "$SSH_AUTH_SOCK" "$HOME/.ssh/agent_sock"
        export SSH_AUTH_SOCK="$HOME/.ssh/agent_sock"
    fi
}

# vscodeから起動されてorphanedになったjavaを止める
function kill-java() {
  pkill -P 1 -f "java .*/\.vscode"
  pkill -P 1 -f "java .* \.GradleDaemon"
  ps -ef | grep java | grep -v grep
}

# fzf-git
## via. https://github.com/junegunn/fzf/wiki/Examples#git

# fbr - checkout git branch
fbr() {
  local branches branch
  branches=$(git --no-pager branch -vv) &&
  branch=$(echo "$branches" | fzf --ansi --reverse +m) &&
  git switch $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

# git branch検索
# ref. https://www.mizdra.net/entry/2024/10/19/172323
user_name=$(git config user.name)
fmt="\
%(if:equals=$user_name)%(authorname)%(then)%(color:default)%(else)%(color:brightred)%(end)%(refname:short)|\
%(committerdate:relative)|\
%(subject)"
function select-git-branch-friendly() {
  selected_branch=$(
    git branch --sort=-committerdate --format=$fmt --color=always \
    | column -ts'|' \
    | fzf --ansi --exact --reverse --preview-window=down --preview='git log --oneline --graph --decorate --color=always -50 {+1}' \
    | awk '{print $1}' \
  )
  BUFFER="${LBUFFER}${selected_branch}${RBUFFER}"
  CURSOR=$#LBUFFER+$#selected_branch
  zle redisplay
}
zle -N select-git-branch-friendly
bindkey '^gb' select-git-branch-friendly

# git commit検索
# ref. https://zenn.dev/miyanokomiya/articles/5931a3af9a710d
function select-git-commit() {
  selected_commit=$(
    git log -n1000 --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" \
    | fzf -m --ansi --no-sort --reverse --preview-window=down --tiebreak=index --preview 'f() {
        set -- $(echo "$@" | grep -o "[a-f0-9]{7}" | head -1);
        if [ $1 ]; then
          git show --color $1
        else
          echo "blank"
        fi
      }; f {}' \
    | grep -o "[a-f0-9]{7}" \
    | tr '\n' ' ' \
  )
  echo ${selected_commit}
  BUFFER="${LBUFFER}${selected_commit}${RBUFFER}"
  CURSOR=$#LBUFFER+$#selected_commit
  zle redisplay
}
zle -N select-git-commit
bindkey "^gc" select-git-commit

function select-git-commit-all() {
  select-git-commit "--all"
}
zle -N select-git-commit-all
bindkey "^ga" select-git-commit-all

# 履歴検索用
function select-history() {
  BUFFER=$(
    history -n -r 1 \
    | fzf --ansi --no-sort --reverse --scheme=history -e +m --query "$LBUFFER" --prompt="History > " \
    | sed -e 's/\\\\/\\/g' -e 's/\\n/;/g' \
  )
  CURSOR=$#BUFFER
}

# start lima with binfmt
function limastart() {
  if [ -z ${1:-} ]; then
    (ulimit -n 1048576 && limactl start default && lima sudo docker run --privileged --rm tonistiigi/binfmt --install all)
  else
    (ulimit -n 1048576 && limactl start $1)
  fi
}
